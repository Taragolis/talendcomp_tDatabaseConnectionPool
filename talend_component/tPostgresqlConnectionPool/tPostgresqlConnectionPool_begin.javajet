<%@ jet imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.utils.NodeUtil
  " 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String mode = ElementParameterParser.getValue(node, "__MODE__");
	String host = ElementParameterParser.getValue(node, "__HOST__");
	String port = ElementParameterParser.getValue(node, "__PORT__");
	String database = ElementParameterParser.getValue(node, "__DATABASE__");
	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
	String user = ElementParameterParser.getValue(node, "__USER__");
	String password = ElementParameterParser.getValue(node, "__PASS__");
	String alias = ElementParameterParser.getValue(node, "__ALIAS__");
	String test_on_borrow = ElementParameterParser.getValue(node, "__TEST_ON_BORROW__");
	String time_between_checks = ElementParameterParser.getValue(node, "__TIME_BETWEEN_CHECKS__");
	String time_idle_connection_is_checked = ElementParameterParser.getValue(node, "__TIME_IDLE_CONNECTION_IS_CHECKED__");
	String num_connections_checked = ElementParameterParser.getValue(node, "__NUM_CONNECTIONS_CHECKED__");
	String additional_param = ElementParameterParser.getValue(node, "__ADDITIONAL_PARAM__");
	if (additional_param == null || additional_param.trim().isEmpty()) {
		additional_param = "null";
	}
	String set_initial_size = ElementParameterParser.getValue(node, "__SET_INITIAL_SIZE__");
	String initial_size = ElementParameterParser.getValue(node, "__INITIAL_SIZE__");
	String set_max_total = ElementParameterParser.getValue(node, "__SET_MAX_TOTAL__");
	String max_total = ElementParameterParser.getValue(node, "__MAX_TOTAL__");
	String set_max_wait_for_connection = ElementParameterParser.getValue(node, "__SET_MAX_WAIT_FOR_CONNECTION__");
	String max_wait_for_connection = ElementParameterParser.getValue(node, "__MAX_WAIT_FOR_CONNECTION__");
	boolean set_init_sql = "true".equals(ElementParameterParser.getValue(node, "__SET_INIT_SQL__"));
	String init_sql = ElementParameterParser.getValue(node, "__INIT_SQL__");
	if (init_sql == null || init_sql.trim().isEmpty()) {
  		init_sql = "null";
	}
	String validationSql = ElementParameterParser.getValue(node, "__VALIDATION_SQL__");
	String creationComponent = ElementParameterParser.getValue(node, "__CONNECTION_POOL__");
	boolean debug = "true".equals(ElementParameterParser.getValue(node, "__DEBUG__"));
	boolean autoCommit = "true".equals(ElementParameterParser.getValue(node, "__AUTO_COMMIT__"));
	boolean reusePool = "true".equals(ElementParameterParser.getValue(node, "__REUSE_EXISTING_POOL__"));
%>

<% if ("PROVIDE".equals(mode)) { %>
	// restore the map from the parent job
	de.cimt.talendcomp.connectionpool.BasicConnectionPool.convertToPooledDataSources(globalMap, KEY_DB_DATASOURCES);
<% } else if ("CONNECTION_WORKAROUND".equals(mode)) { 
		String connectionToFix = ElementParameterParser.getValue(node, "__CONNECTION_TO_FIX__"); 
		INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connectionToFix);
		boolean useAlias = "true".equals(ElementParameterParser.getValue(connectionNode, "__SPECIFY_DATASOURCE_ALIAS__")); 
		String connAlias = ElementParameterParser.getValue(connectionNode, "__DATASOURCE_ALIAS__"); 
		if (useAlias && connAlias != null) { %>
	{
		String dsAlias = <%=connAlias%>;
		if (dsAlias != null && dsAlias.trim().isEmpty() == false) {
		   @SuppressWarnings("unchecked")
			java.util.Map<String, routines.system.TalendDataSource> dataSources = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
			if (dataSources != null) {
				if (dataSources.get(dsAlias) != null) {
					java.sql.Connection conn = dataSources.get(dsAlias).getRawDataSource().getConnection();
					if (conn == null) {
						throw new Exception("<%=connectionToFix%>: Got no connection from data source with alias: " + dsAlias);
					} else {
						conn.setAutoCommit(false);
						// let the other components referencing this connection really use this connection! 
						globalMap.put("conn_<%=connectionToFix%>", conn);
					}
				} else {
					throw new Exception("<%=connectionToFix%>: references to a not existing data source with alias: " + dsAlias);				
				}
			}				
		}
	}
<%    } else { %>
	// connection <%=connectionToFix%> was not configured to use a data source
<%    } %>
<% } else if ("CLOSE_POOL".equals(mode)) { %>
	{
  		de.cimt.talendcomp.connectionpool.BasicConnectionPool pool = (de.cimt.talendcomp.connectionpool.BasicConnectionPool) globalMap.get("<%=creationComponent%>_pool");
  		if (pool != null) {
  			// close only if we do not use a container provided pool
	  		pool.closePool(); // close the entire pool
  		}
	}
<% } else if ("CREATE_POOL".equals(mode)) { %> 
	boolean dsAlreadyExists_<%=cid%> = false;
   @SuppressWarnings("unchecked")
	java.util.Map<String, routines.system.TalendDataSource> dsmap_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
	if (dsmap_<%=cid%> != null) {
		String alias = <%=alias%>;
		routines.system.TalendDataSource ds = dsmap_<%=cid%>.get(alias);
		if (ds != null) {
			// take care the TalendDataSource is of type PooledTalendDataSource!
			de.cimt.talendcomp.connectionpool.BasicConnectionPool.convertToPooledDataSource(globalMap, KEY_DB_DATASOURCES, alias);
			dsAlreadyExists_<%=cid%> = true;
		}
	}
	if (dsAlreadyExists_<%=cid%> == false) {
  		de.cimt.talendcomp.connectionpool.BasicConnectionPool.info("Create new pool with alias: " + <%=alias%>);
  		String connectionString_<%=cid%> = "jdbc:postgresql://"+<%=host%>+":"+<%=port%>+"/"+<%=database%>;
  		de.cimt.talendcomp.connectionpool.BasicConnectionPool <%=cid%> = new de.cimt.talendcomp.connectionpool.BasicConnectionPool(connectionString_<%=cid%>, <%=user%>, <%=password%>, "PostgreSQL");
  		de.cimt.talendcomp.connectionpool.BasicConnectionPool.setDebug(<%=debug%>);
  		<%=cid%>.setAdditionalProperties(<%=additional_param%>);
  		<%=cid%>.setAutoCommit(<%=autoCommit%>);
  		<%=cid%>.setNumConnectionsPerCheck(<%=num_connections_checked%>);
  		<%=cid%>.loadDriver("org.postgresql.Driver");
  		<%=cid%>.setTestOnBorrow(<%=test_on_borrow%>);
  		<%=cid%>.setValidationQuery(<%=validationSql%>);
  		<%=cid%>.setTimeIdleConnectionIsChecked(<%=time_idle_connection_is_checked%>);
  		<%=cid%>.setTimeBetweenChecks(<%=time_between_checks%>);
<% 	if (set_initial_size.equals("true")) { %>
  		<%=cid%>.setInitialSize(<%=initial_size%>);
<% 	} %>
<% 	if (set_max_total.equals("true")) { %>
		<%=cid%>.setMaxTotal(<%=max_total%>);
<% 	} %>
<% 	if (set_max_wait_for_connection.equals("true")) { %>
		<%=cid%>.setMaxWaitForConnection(<%=max_wait_for_connection%>);
<% 	} %>
<% 	if (set_init_sql) { %>
  		<%=cid%>.setInitSQL(<%=init_sql%>);
<% 	} %>
  		try {
			// establish the connections
  			<%=cid%>.initializePool();
  		} catch (Exception e) {
  			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
  			throw e;
  		}
  		de.cimt.talendcomp.connectionpool.BasicConnectionPool.putInstance(<%=alias%>, <%=cid%>);
		// fill the data source map
		@SuppressWarnings("unchecked")
		java.util.Map<String, routines.system.TalendDataSource> dataSourceMap_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
		if (dataSourceMap_<%=cid%> == null) {
			dataSourceMap_<%=cid%> = new java.util.HashMap<String, routines.system.TalendDataSource>();
			globalMap.put(KEY_DB_DATASOURCES, dataSourceMap_<%=cid%>);
		}
	  	// add data source to the global list of data sources
	  	dataSourceMap_<%=cid%>.put(<%=alias%>, <%=cid%>.getDataSource());
	  	// for internal usage e.g. to close the pool
	  	globalMap.put("<%=cid%>_pool",<%=cid%>);
	  	globalMap.put("db_<%=cid%>", <%=database%>);
	  	globalMap.put("<%=cid%>_DBNAME", <%=database%>);
	  	globalMap.put("schema_" + "<%=cid%>",<%=dbschema%>);
	} else { // if (<%=cid%> == null)
		de.cimt.talendcomp.connectionpool.BasicConnectionPool.debug("Use existing pool with alias: " + <%=alias%>);
  	} // if (dsAlreadyExists_<%=cid%> == false)
<% } // if ("CREATE_POOL".equals(mode)) %>